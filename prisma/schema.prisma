// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // Hashed password for credentials authentication
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Onboarding fields
  onboardingCompleted Boolean @default(false) @map("onboarding_completed")
  onboardingStep      Int     @default(0) @map("onboarding_step")
  
  accounts            Account[]
  sessions            Session[]
  incomes             Income[]
  expenses            Expense[]
  budgets             Budget[]
  budgetCategories    BudgetCategory[]
  assets              Asset[]
  liabilities         Liability[]
  financialGoals      FinancialGoal[]
  transactions        Transaction[]
  netWorthSnapshots   NetWorthSnapshot[]
  userProfile         UserProfile?

  @@map("users")
}

model UserProfile {
  id                    String                @id @default(cuid())
  userId                String                @unique @map("user_id")
  
  // Demographics
  age                   Int?
  occupation            String?
  householdSize         Int?                  @map("household_size")
  numberOfDependents    Int?                  @map("number_of_dependents")
  
  // Financial Profile
  annualIncomeRange     IncomeRange?          @map("annual_income_range")
  financialExperience   FinancialExperience?  @map("financial_experience")
  riskTolerance         RiskTolerance?        @map("risk_tolerance")
  investmentTimeHorizon InvestmentTimeHorizon? @map("investment_time_horizon")
  
  // Goals and Priorities
  primaryFinancialGoals String[]              @default([]) @map("primary_financial_goals")
  financialConcerns     String[]              @default([]) @map("financial_concerns")
  
  // Preferences
  preferredCurrency     String                @default("USD") @map("preferred_currency")
  notificationsEnabled  Boolean               @default(true) @map("notifications_enabled")
  
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Income {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  source      String   // e.g., "Police Officer Salary", "Interest/Dividends"
  amount      Decimal  @db.Decimal(12, 2)
  frequency   String   @default("monthly") // monthly, yearly, weekly, bi-weekly
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("incomes")
}

model Expense {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  category    String   // e.g., "Taxes", "Home Mortgage Payment"
  amount      Decimal  @db.Decimal(12, 2)
  frequency   String   @default("monthly") // monthly, yearly, weekly, bi-weekly
  isRecurring Boolean  @default(true) @map("is_recurring")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Budget {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  totalAmount Decimal  @db.Decimal(12, 2) @map("total_amount")
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories BudgetCategory[]

  @@map("budgets")
}

model BudgetCategory {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  budgetId      String   @map("budget_id")
  name          String   // e.g., "Housing", "Food", "Transportation"
  allocatedAmount Decimal @db.Decimal(12, 2) @map("allocated_amount")
  spentAmount   Decimal  @default(0) @db.Decimal(12, 2) @map("spent_amount")
  color         String   @default("#3B82F6") // For UI visualization
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  budget Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@map("budget_categories")
}

model Asset {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  name        String
  type        AssetType
  value       Decimal     @db.Decimal(12, 2)
  costBasis   Decimal?    @db.Decimal(12, 2) @map("cost_basis") // For investments
  growth      Decimal?    @db.Decimal(5, 2) // Growth percentage
  lastUpdated DateTime    @default(now()) @map("last_updated")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("assets")
}

model Liability {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  name          String
  type          String   // e.g., "Home Mortgage", "Car Loans", "Credit Cards"
  balance       Decimal  @db.Decimal(12, 2)
  interestRate  Decimal? @db.Decimal(5, 2) @map("interest_rate")
  minimumPayment Decimal? @db.Decimal(12, 2) @map("minimum_payment")
  dueDate       DateTime? @map("due_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("liabilities")
}

model FinancialGoal {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  name          String
  type          GoalType
  targetAmount  Decimal     @db.Decimal(12, 2) @map("target_amount")
  currentAmount Decimal     @default(0) @db.Decimal(12, 2) @map("current_amount")
  targetDate    DateTime?   @map("target_date")
  description   String?
  isCompleted   Boolean     @default(false) @map("is_completed")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("financial_goals")
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String            @map("user_id")
  amount      Decimal           @db.Decimal(12, 2)
  description String
  category    String
  type        TransactionType
  date        DateTime
  accountName String?           @map("account_name")
  tags        String[]          @default([])
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model NetWorthSnapshot {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  date        DateTime @default(now())
  totalAssets Decimal  @db.Decimal(12, 2) @map("total_assets")
  totalLiabilities Decimal @db.Decimal(12, 2) @map("total_liabilities")
  netWorth    Decimal  @db.Decimal(12, 2) @map("net_worth")
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("net_worth_snapshots")
}

enum AssetType {
  REAL_ESTATE
  INVESTMENTS
  CASH_EQUIVALENTS
  STOCKS_FUNDS_CDS
  BUSINESS
  PERSONAL_PROPERTY
}

enum GoalType {
  SAVINGS
  DEBT_PAYOFF
  INVESTMENT
  RETIREMENT
  EMERGENCY_FUND
  MAJOR_PURCHASE
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum IncomeRange {
  UNDER_25K
  RANGE_25K_50K
  RANGE_50K_75K
  RANGE_75K_100K
  RANGE_100K_150K
  RANGE_150K_250K
  OVER_250K
}

enum FinancialExperience {
  BEGINNER
  SOME_EXPERIENCE
  EXPERIENCED
  VERY_EXPERIENCED
}

enum RiskTolerance {
  VERY_CONSERVATIVE
  CONSERVATIVE
  MODERATE
  AGGRESSIVE
  VERY_AGGRESSIVE
}

enum InvestmentTimeHorizon {
  SHORT_TERM      // 1-3 years
  MEDIUM_TERM     // 3-10 years
  LONG_TERM       // 10+ years
}